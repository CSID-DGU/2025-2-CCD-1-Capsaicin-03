name: Backend CI/CD

on:
  push:
    branches: [ "main", "dev" ]
    paths:
      - "Backend/**"
  pull_request:
    branches: [ "main", "dev" ]
    paths:
      - "Backend/**"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ Gradle 캐시
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4️⃣ gradlew 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: Backend

      # 5️⃣ Gradle 빌드 (.env 주입 + 테스트 제외)
      - name: Build with Gradle
        working-directory: Backend
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          set -a
          . .env
          set +a
          ./gradlew clean build -x test

      # 6️⃣ Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7️⃣ Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/na-murok-murok
          docker build -t $IMAGE_NAME:latest ./Backend
          docker push $IMAGE_NAME:latest

      # 8️⃣ EC2로 배포 (push일 때만)
      - name: Deploy to EC2
        if: github.event_name == 'push'
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/na-murok-murok
            CONTAINER_NAME=awesome_driscoll

            echo "${{ secrets.ENV_FILE }}" > .env

            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true

            sudo docker pull $IMAGE_NAME:latest

            sudo docker run -d -p 8080:8080 \
              --env-file .env \
              --name $CONTAINER_NAME \
              $IMAGE_NAME:latest

            rm .env

            echo "✅ 배포 완료!"
